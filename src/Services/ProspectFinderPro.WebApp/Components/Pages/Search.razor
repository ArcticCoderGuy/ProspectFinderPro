@page "/search"
@rendermode InteractiveServer
@using System.Globalization
@using System.Net.Http.Json
@inject IConfiguration Config

<div style="display: flex; justify-content: space-between; align-items: flex-start;">
  <div>
    <h3>Company Search v3.0 🦩</h3>
    <p class="text-muted small">API Base: @_base</p>
  </div>
  <div style="text-align: center; margin-left: 20px;">
    <div style="font-size: 18px; margin-bottom: 10px; background: pink; padding: 10px; border-radius: 5px;">
      <pre>  /\   /\<br/> (  o o )<br/>  \  ~  /<br/>   |   |<br/>  FLAMINGO!</pre>
    </div>
    <div style="width: 120px; height: 120px; background-color: red; border: 2px solid black; border-radius: 8px; display: flex; align-items: center; justify-content: center;">
      <div style="color: white; font-size: 12px; font-weight: bold; text-align: center;">
        DEBUG<br/>✅ WORKS!<br/>V2.0
      </div>
    </div>
  </div>
</div>

<div class="row g-2">
  <div class="col"><input class="form-control" @bind="minTurnoverStr" placeholder="Min € (e.g. 5000000)" /></div>
  <div class="col"><input class="form-control" @bind="maxTurnoverStr" placeholder="Max € (e.g. 10000000)" /></div>
  <div class="col">
    <select class="form-select" @bind="hasOwnProductsStr">
      <option value="">Has own products?</option>
      <option value="true">Yes</option>
      <option value="false">No</option>
    </select>
  </div>
  <div class="col d-flex gap-2">
    <button class="btn btn-primary" @onclick="RunSearch">Search</button>
    <button class="btn btn-outline-secondary" @onclick="LoadDemo">Load demo 20</button>
  </div>
</div>

@if (!string.IsNullOrWhiteSpace(error))
{
  <div class="alert alert-danger mt-3">@error</div>
}
else if (loading)
{
  <p class="mt-3">Loading…</p>
}
else if (rows is null)
{
  <p class="mt-3">Run a search.</p>
}
else if (rows.Count == 0)
{
  <p class="mt-3">No results.</p>
}
else
{
  <table class="table table-striped mt-3">
    <thead><tr>
      <th>BusinessId</th><th>Name</th><th>Turnover</th><th>Industry</th>
      <th>Own products</th><th>Score</th><th>Employees</th><th>Location</th>
    </tr></thead>
    <tbody>
    @foreach (var r in rows)
    {
      <tr>
        <td>@r.businessId</td><td>@r.name</td><td>@r.turnover.ToString("N0")</td>
        <td>@r.industry</td><td>@r.hasOwnProducts</td><td>@r.productConfidenceScore</td>
        <td>@r.employeeCount</td><td>@r.location</td>
      </tr>
    }
    </tbody>
  </table>
}

@code {
  string? minTurnoverStr; string? maxTurnoverStr; string? hasOwnProductsStr;
  List<Item>? rows = null;
  bool loading = false;
  string? error;

  HttpClient _client = default!;
  string _base = default!;
  bool _demoLoadedOnce = false;

  protected override async Task OnInitializedAsync()
  {
    // FIX: Blazor Server mode - koodi ajaa palvelimella (kontissa)
    // Palvelin voi käyttää Docker sisäisiä hostnimiä
    _base = Config["ApiBaseUrlServer"] ?? "http://api-gateway:8080";
    _client = new HttpClient { BaseAddress = new Uri(_base) };
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender && !_demoLoadedOnce)
    {
      _demoLoadedOnce = true;
      await LoadDemo();
      StateHasChanged();
    }
  }

  async Task LoadDemo() => await Fetch("/api/companies/search?page=1&pageSize=20");

  async Task RunSearch()
  {
    decimal? min = decimal.TryParse(minTurnoverStr, NumberStyles.Any, CultureInfo.InvariantCulture, out var d1) ? d1 : null;
    decimal? max = decimal.TryParse(maxTurnoverStr, NumberStyles.Any, CultureInfo.InvariantCulture, out var d2) ? d2 : null;
    bool? owns = hasOwnProductsStr == "true" ? true : hasOwnProductsStr == "false" ? false : (bool?)null;

    var qs = new List<string>();
    if (min is > 0) qs.Add($"minTurnover={min.Value.ToString(CultureInfo.InvariantCulture)}");
    if (max is > 0) qs.Add($"maxTurnover={max.Value.ToString(CultureInfo.InvariantCulture)}");
    if (owns is not null) qs.Add($"hasOwnProducts={(owns!.Value ? "true" : "false")}");
    qs.Add("page=1"); qs.Add("pageSize=50");

    await Fetch("/api/companies/search?" + string.Join("&", qs));
  }

  async Task Fetch(string url)
  {
    loading = true; error = null;
    try
    {
      var resp = await _client.GetFromJsonAsync<SearchResponse>(url);
      rows = resp?.items ?? new();
    }
    catch (Exception ex)
    {
      error = $"Request failed: {ex.Message}. Base: {_base}";
      rows = new();
    }
    finally { loading = false; }
  }

  public record SearchResponse(int total, int page, int pageSize, List<Item> items);
  public record Item(string businessId, string name, decimal turnover, string industry,
                     bool hasOwnProducts, double productConfidenceScore, int employeeCount, string location);
}
